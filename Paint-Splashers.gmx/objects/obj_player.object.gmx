<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_playermask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//enums
enum colors {
  blue = c_aqua,
  red = c_red
}

enum weapons {
 none = 0,
 blaster = 1,
 assault = 2,
 rocket = 3,
 minigun = 4
 
}



//movement
hspd = 0;
vspd = 0;
playerspeed = 120 / room_speed;
playerid = -1;


//variables
crosshair = instance_create(x,y,obj_crosshair);

RELOAD = false;
RELOAD_TIME = room_speed / 3;

current_weapon = weapons.none;
ammo = 0;

PLAYER_HEALTH = 10;
inv_frames = room_speed * 4;
cur_inv = 0;
is_inv = true;

starter_x = x;
starter_y = y;

PLAYER_DIRECTION = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create a dead player and replace the variables
var dead = instance_create(x,y,obj_playerdead);

dead.player_color = playerid;
dead.starter_x = starter_x;
dead.starter_y = starter_y;

if (instance_exists(crosshair)) {
 with(crosshair) {
 instance_destroy();
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RELOAD = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement code
if gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.2);

if (playerid = colors.blue) {
KEY_LEFT = keyboard_check(ord("A"));
KEY_RIGHT = keyboard_check(ord("D"));
KEY_UP = keyboard_check(ord("W"));
KEY_DOWN = keyboard_check(ord("S"));
KEY_GUN = mouse_check_button(mb_left);
PLAYER_DIRECTION = point_direction(x,y, mouse_x, mouse_y);
} else if (playerid = colors.red) {
KEY_LEFT = (gamepad_axis_value(0, gp_axislh) &lt; 0);
KEY_RIGHT = (gamepad_axis_value(0, gp_axislh) &gt; 0);
KEY_UP = (gamepad_axis_value(0, gp_axislv) &lt; 0);
KEY_DOWN = (gamepad_axis_value(0, gp_axislv) &gt; 0);
KEY_GUN = gamepad_button_check(0,gp_shoulderrb);
var h_point, v_point;
h_point = gamepad_axis_value(0,gp_axisrh);
v_point = gamepad_axis_value(0,gp_axisrv);
//GAMEPAD R-STICK TARGETING
if gamepad_axis_value(0,gp_axisrv) &gt;= -0.2 &amp;&amp; gamepad_axis_value(0,gp_axisrv) &lt;= 0.2 
&amp;&amp; gamepad_axis_value(0,gp_axisrh) &gt;= -0.2 &amp;&amp; gamepad_axis_value(0,gp_axisrh) &lt;= 0.2
{
PLAYER_DIRECTION = PLAYER_DIRECTION;
}
else
{
var hraxis = gamepad_axis_value(0, gp_axisrh);
var vraxis = gamepad_axis_value(0, gp_axisrv);
PLAYER_DIRECTION = point_direction(0, 0, h_point, v_point);
}

}
var movespd = playerspeed;
diag = hspd != 0 &amp;&amp; vspd != 0;

if (diag) movespd *= 0.707;

if (global.done = false and global.started != false) {
//horizontal movement
if (KEY_LEFT &amp;&amp; !KEY_RIGHT) {
 hspd = -movespd;
} else if (!KEY_LEFT &amp;&amp; KEY_RIGHT) {
 hspd = movespd;
} else if (!KEY_LEFT &amp;&amp; !KEY_RIGHT) {
 hspd = 0;
}

//vertical movement
if (KEY_UP &amp;&amp; !KEY_DOWN) {
 vspd = -movespd;
} else if (!KEY_UP &amp;&amp; KEY_DOWN) {
 vspd = movespd;
} else if (!KEY_UP &amp;&amp; !KEY_DOWN) {
 vspd = 0;
}
}


if (place_meeting(x+hspd,y,obj_solid))
{
    while(!place_meeting(x+sign(hspd),y,obj_solid))
    {
        x += sign(hspd);
    }
    hspd = 0;
    
    if (vspd = 0) {
     scr_check_TB();
    }
}

if (global.done = false and global.started != false) {
x += hspd;
}

if (place_meeting(x,y+vspd,obj_solid))
{
    while(!place_meeting(x,y+sign(vspd),obj_solid))
    {
        y += sign(vspd);
    }
    vspd = 0;
    
    if (hspd = 0) {
     scr_check_LR();
    }
}


if (global.done = false and global.started != false) {
y += vspd;
}

if (global.done = false and global.started != false) {
if (KEY_GUN &amp;&amp; RELOAD = false)  {
scr_shoot();
var xx,yy,color;
xx = x;
yy = y;
color = playerid;
  with (obj_game) {
   if (surface_exists(surf)) {
    surface_set_target(surf);
    draw_sprite_ext(spr_splash,choose(0,1),xx,yy,1,1,0,color,1);
    surface_reset_target();
   }
  }
  
audio_play_sound(snd_shoot, 0, false);
}
}

if (playerid = colors.blue) {
  crosshair.x = mouse_x;
  crosshair.y = mouse_y;
  crosshair.image_blend = playerid;

} else {
if (instance_exists(crosshair)){
 with (crosshair) {
 instance_destroy();
 }
 
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///which weapon does the player have?
if (ammo = 0) {
 current_weapon = weapons.none;
}

switch(current_weapon) {
case weapons.none:
RELOAD_TIME = room_speed / 3;
break;
case weapons.blaster:
RELOAD_TIME = room_speed;
break;
case weapons.assault:
RELOAD_TIME = room_speed / 5;
break;
case weapons.rocket:
RELOAD_TIME = room_speed;
break;
case weapons.minigun:
RELOAD_TIME = room_speed / 7;
break;

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invincibility frames
if cur_inv &gt; -1 {
    if cur_inv&gt;=inv_frames{
        is_inv = false;
        cur_inv = -1;
    }else cur_inv++;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///death
if (PLAYER_HEALTH &lt;= 0) {
 instance_destroy();
 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_rectangle(x-19, y+16, x+19, y,false);
draw_sprite_ext(spr_player,1,x,y,1,1, PLAYER_DIRECTION, playerid, !is_inv + 0.7);
//draw_sprite_ext(spr_playermask,0,x,y,1,1, 0, playerid, 1);
draw_set_font(font_ammo);

if (playerid = colors.blue) {
  draw_sprite_ext(spr_crosshair, 0, mouse_x, mouse_y,1,1,0,playerid,1);
} else if (playerid = colors.red) {
  var haxis, vaxis,dirh, dirv;
  haxis = gamepad_axis_value(0,gp_axisrh);
  vaxis = gamepad_axis_value(0,gp_axisrv);
  dirh = lengthdir_x(64,PLAYER_DIRECTION);
  dirv = lengthdir_y(64,PLAYER_DIRECTION);
  draw_sprite_ext(spr_crosshair, 0, x+dirh, y+dirv,1,1,0,playerid,1);
}

//debugging stuff
if (ammo != 0) {
  draw_set_valign(fa_center);
  draw_set_halign(fa_center);
  draw_text_colour(x,y+30,string(ammo),playerid,playerid,playerid,playerid,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
